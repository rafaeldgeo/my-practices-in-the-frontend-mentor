@use "sass:map";
@use "sass:math";
@use "breakpoints";
@forward "breakpoints";

$neutral-900: #030303;
$neutral-400: #6a6662;
$neutral-200: #fff7f0;
$neutral-0: #ffffff;
$light-red-500: #e16b5b;
$galactic-blue-500: #755cde;
$summer-yellow-500: #f6a560;
$pink-500: #f39e9e;
$cyan-500: #61c4b7;
$dark-purple-500: #552049;
$font: "Plus Jakarta Sans", sans-serif;
$deviceList: (
  xs: 375,   // iPhone SE / base mobile
  sm: 576,   // smartphone
  md: 768,   // tablets
  lg: 992,   // notebooks 
  xl: 1200,  // desktops 
  xxl: 1440  // wide
);

//reset onfig
@mixin reset {
  *,
  *::before,
  *::after {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: $font;
  }
}

// convert px to rem
$base-font-size: 16;
@function convertPxToRem($sizePx) {
  @return math.div($sizePx, $base-font-size) * 1rem;
}

// calculate the view size from device
@function calculateVw($sizePx, $device) {
  $sizeView: map.get($deviceList, $device);
  $sizeVw: (math.div($sizePx, $sizeView) * 100) * 1vw;

  @return $sizeVw;
}

//define the fluid space using min(vw, rem)
// @function fluidSpace($minPx, $maxPx, vwBase) {
//     $sizeVw: calculateVw($sizePx, $device);
//     $sizeRem: convertPxToRem($sizePx);


//   @if map-get($deviceList, $device) {
//     @return clamp($sizeRem * $ratio, $sizeVw, $sizeRem);
//   } @else {
//     @error "You must define one device valid";
//   }
// }

// @function fluidSpace($min, $max, $vwBase) {
//   $vw: (($max - $min) / $vwBase) * 100;
//   @return clamp(
//     convertPxToRem($min),
//     #{$vw}vw,
//     convertPxToRem($max)
//   );
// }

@function fluidSpace($minPx, $maxPx, $vwBase, $idealPx: null) {
  
  // validation
  @if ($minPx > $maxPx) {
    @error "Invalid range: the minimum value (#{$minPx}) cannot be greater than the maximum (#{$maxPx}).";
  }

  @if $idealPx == null {
    $idealPx: $maxPx;
  } @else if ($idealPx > $maxPx) {
    @error "Invalid ideal: the ideal value (#{$idealPx}) cannot exceed the maximum (#{$maxPx}).";
  }

  // calcule
  $minRem: convertPxToRem($minPx);
  $maxRem: convertPxToRem($maxPx);
  $vwValue: ($idealPx / $vwBase) * 100;

  @return clamp($minRem, #{$vwValue}vw, $maxRem);
}

// @function fluidSpace($sizePxMin, $sizePxMax, $device: "sm") {
//   @if map-get($deviceList, $device) {
//     $sizeVw: calculateVw($sizePxMax, $device);
//     $sizeRemMin: convertPxToRem($sizePxMin);
//     $sizeRemMax: convertPxToRem($sizePxMax);
//     @return clamp($sizeRemMin, $sizeVw, $sizeRemMax);
//   } @else {
//     @error "You must define one device valid";
//   }
// }

// @function fluidSpace($sizePx, $device: "sm") {
//   @if map-get($deviceList, $device) {
//     @return min(calculateVw($sizePx, $device), convertPxToRem($sizePx));
//   } @else {
//     @error "You must define one device valid";
//   }
// }


// define the fluid typography using clamp(rem, vw, rem)
@function fluidFont(
$sizePxMin, 
$sizePxMax, 
$device: "sm") {
  @if map-get($deviceList, $device) {
    $sizeVwPx: $sizePxMax - 8;
    @return clamp(
      convertPxToRem($sizePxMin),
      0.5rem + calculateVw($sizeVwPx, $device),
      convertPxToRem($sizePxMax)
    );
  } @else {
    @error "You must define one device valid";
  }
}
